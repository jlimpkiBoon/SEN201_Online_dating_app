Source code file: user_repo.py


Author: Boon
Reviewer : Pepper, Thiri
Scribe: Ryuki


Function purposed


* create_user(username, age, city, hobby) : inserts a user with a unique username.
* get_user(username) : fetches one row (SQLite Row)
* update_user(username, age, city, hobby) : updates fields by username
* delete_user(username) : delete account by username


Problem and issues found 


1. Type ambiguity from CLI : The function in user_repo didn’t check the attribute of the user input 
2. No ensuring message such as return values: create_user function doesn't return anything like a user is successfully created.
3. Input validation: the function accepts input without validation from the user into the database.

# Annotated Source Code: user_repo.py
# Inline comments describe detected issues and recommendations.

import sqlite3
from database import init_db, get_conn


def create_user(username, age, city, hobby):
    # Issue: No input validation (e.g., type or empty check)
    # Issue: No return value to confirm success; only prints message.
    init_db()
    conn = get_conn()
    cur = conn.cursor()
    try:
        cur.execute(
            "INSERT INTO users (username, age, city, hobby) VALUES (?, ?, ?, ?);",
            (username, age, city, hobby)
        )
        conn.commit()
        print("User created successfully!")
    except sqlite3.IntegrityError:
        print("Username already exists.")
    finally:
        conn.close()

def get_user(username):   
    # Issue: Missing parentheses on cur.execute call will cause no execution.
    # Issue: No error handling if user not found.   
    conn = get_conn()
    cur = conn.cursor()
    cur.execute
    (
        "SELECT * FROM users WHERE username = ?;", (username,)
    )
    user = cur.fetchone()
    conn.close()
    return user

def update_user(username, age, city, hobby):
    # Issue: No input validation or confirmation return.
    # Issue: Risk of updating non-existent user without warning.
    conn = get_conn()
    cur = conn.cursor()
    cur.execute
    (
        "UPDATE users SET age = ?, city = ?, hobby = ? WHERE username = ?;",
        (age, city, hobby, username)
    )
    conn.commit()
    conn.close()
    print("User updated successfully!")

def delete_user(username):
    # Issue: No check if user exists before deleting.
    # Issue: No return status confirmation.
    conn = get_conn()
    cur = conn.cursor()
    cur.execute(
        "DELETE FROM users WHERE username = ?;",
        (username,)
    )
    conn.commit()
    conn.close()
    print("User deleted successfully!")

             


